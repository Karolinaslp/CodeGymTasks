Plan to write a chat system.
The system will consist of one server and multiple clients,
one for each chat participant.

PART 1: Work with ConsoleHelper class

    1. Add BufferedReader field and initialized it.
    2. Create writeMassage(),
              readString(),
              readInt() methods and  implement them.
    3. Add values for the MessageType enum.
    4. Implement Message class.

PART 2: Working with Connection class

    1. Add Socket, ObjectOutputStream, ObjectInputStream fields.
    2. Acknowledge about socket connection.
    3. Make Connection class serializable.
    4. Create send(),
              receive(),
              getRemoteSocketAddress(),
              close() methods and implement them.
    5. Implement Closeable interface.
    6. Add synchronized block in send() and receive() methods.

PART 3: Working with Server class

    1. Create nested private Handler class that inherits Thread.
    2. Implement Handler class.
    3. In main method create a server socket connection.
    4. In while look server waits for client to connect to the socket
       and creates a new Handler thread on which message will be exchanged.
    5. Add static Map field which contain clients names as key, and connection as value.
    6. Create and implement sendBroadcastMessage() method.
    7. In Handler nested class add serverHandshake() method that:
            a) Generate and send a username request
            b) Get the client's response
            c) Verify that the response has a username
            d) Extract the name from the response, and verify that it is not empty and is not already being used (use connectionMap)
            e) Add the new user and connection to connectionMap
            f) Send an informational message to the client, informing it that the name was accepted
            g) If any verification step fails, request the client's name again
            h) Return the accepted name as the return value
    8. Create and implement notifyUsers() method that:
            a) Iterate over connectionMap.
            b) For each element in step 1, get the client name, generate a USER_ADDED message that includes the passed name.
            c) Use the connection field to send the generated message.
            d) Don't send a USER_ADDED message to the user whose name is equal to userName.
    9. Create and implement serverMainLoop() method which in infinity loop:
            a) Receive client messages.
            b) If received message is text, than generate a new text message.
            c) Send generated message to all clients.
            d) If received message is not text, display an error message.
    10. Create run() method that :
             a) Display a message indicating that a new connection was established with a remote address.
             b) Call the method that implements the handshake with the client, and store the name of the new client.
             c) Send the name of the new participant (USER_ADDED message) to all chat participants.
             d) Inform the new participant about the existing participants.
             e) Start the server's main message-processing loop.
             f) Close the connection if an exception occurs.
             g) Remove participant who's address occur error.
             h) Display a message indicating that the connection with the remote address is closed.

PART 4: Creating client package

    1. Create client package and Client class.
    2. Create nested SocketThread class that inherit Thread.
    3. Create Connection field.
    4. Add boolean clientConnected field.
    5. Add  protected methods :
            a) String getServerAddress()
            b) int getServerPort()
            c) String getUserName()
            d) boolean shouldSendTextFromConsole()
            e) SocketThread getSocketThread()
            f) void sendTextMessage(String text)
    6. Create run() method that :
            a) Create a socket thread.
            b) Mark created thread as daemon.
            c) Start a helper thread.
            d) Making the current thread wait until it receives a notification from another thread.
            e) Once the thread receives a notification, check the value of clientConnected.
            f) Read messages from the console until the client is connected. If 'exit' is entered, then exit the loop.
            g) After each string is read, if the shouldSendTextFromConsole() method returns true, send the text using the sendTextMessage() method.
    7. Add the main method that create a new Client and call its run() method.
    8. Implement SockedThread class, add helper methods:
            a) void processIncomingMessage(String message).
            b) void informAboutAddingNewUser(String userName).
            c) void informAboutDeletingNewUser(String userName).
            d) void notifyConnectionStatusChanged(boolean clientConnected).
    9. Add and implement clientHandshake() method that:
            a) Use connection field to receive messages in the loop.
            b) If a received message is a NAME_REQUEST, asking the user to enter a username, creating a new message that is a MessageType.USER_NAME and contains the entered name, and sending the message to the server.
            c) If a received message is a MessageType.NAME_ACCEPTED, inform the main thread, which is waiting for this. Then exiting the method.
            d) If there is a message of any other type, throw an IOException("Unexpected MessageType").
    10. Add a protected void clientMainLoop() that :
            a) Is using the connection field to receive a message from the server.
            b) If it is a text message, processing it using the processIncomingMessage() method.
            c) If the message is a MessageType.USER_ADDED, processing it using the informAboutAddingNewUser() method.
            d) If the message is a MessageType.USER_REMOVED, process it using the informAboutDeletingNewUser() method.
            e) If the client receives a message of some other type, throw an IOException("Unexpected MessageType").