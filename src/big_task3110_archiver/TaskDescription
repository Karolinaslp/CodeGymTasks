I plan to write an archiver that will be able to:
 a) zip and unzip files.
 b) extract an archive.
 c) add a new file to an existing archive.
 d) remove a file from an archive.
 e) view the contents of an archive.

PART 1:

    1. Create ZipFileManager class : It will perform operations on the archive file.
    2. Create Archiver class and add main method to it.
    3. Implement createZip() method that zip the file specified by the source argument.

PART 2:

   1. Declare the Operation enum, and add the commands to it.
   2. Create and implement ConsoleHelper class:
        a) add void writeMessage(String message) method that writes message to the console.
        b) add String readString() method tha tread string from the console.
        c) add int readInt() method that read number from the console.

PART 3:

    1. Create command package that will store commands which implies the execution of some action.
    2. Create class for each command.
    3. Create Command interface with execute() method which use ConsoleHelper class to display message.

PART 4:

    1. Create CommandExecutor class that implements command pattern.
    2. Prevent direct calls to the constructor by making it private.
    3. Create allKnownCommandsMap that store the commands.
    4. Create execute(Operation operation)  method which select the required command from map, and calls its execute method.

PART 5:

     1. Create askOperation() method that
      a) ask user to choose one of operation from Operation enum.
      b) find operation by its ordinal number using ordinal() method.
     2. Rewrite main method to use CommandExecutor and askOperation() method.

PART 6:

    1. Creating FileManager class witch we will use to get a list of all the files in folder.
    2. Creating a getFileList() method that return a list of relative paths for all of the files in rootPath parameter.

PART 7:

    1. Refactoring ZipFileManager class.
    2. Creating void addNewZipEntry(ipOutputStream zipOutputStream, Path filePath, Path fileName) method that :
        a) creating an inputD=Stream for the fileName located in the FilePath directory.
        b) creating a new ZipEntry.
        c) using void copyData(InputStream in, OutputStream out) method.
        d) closing the zip entry.
    3. Creating void copyData(InputStream in, OutputStream out) method.
    4. Refactoring createZip(Path source) method:
        a) checking if the directory where we will create zipFile exists, amd if not creating it.
        b) if source is a regular file, then calling annNewEntry() method.
        c) if source is a directory we're:
            -creating FileManager object, passing source to the constructor
            -getting a list of files from the file manager
            -calling addNewZipEntry() method for each element of list;
        d) if source is not a folder or a file, we throw a PathNotFoundException.

PART 8:

    1. Creating and implementing ZipFileManager's class getZipFileManager() method:
        a) asking the user to enter the full path to the archive.
        b) using the entered string to create a Path.
        c) creating ZipFileManager object, and passing the path to the constructor.
        d) returning created object.
    2. Implementing ZipCreateCommand class execute() method:
        a) creating ZipFileManager class object by calling getZipFileManager() method.
        b) asking user to enter the full path to the file or directory to be archived.
        c) creating path using entered string.
        d) calling ZipFileManager class createZip() method;
    3. Creating a FileProperties class that is responsible for the properties of each file in the archive.
    4. Creating List<FileProperties> getFileList() method in ZipFileManager class:
        a) checking whether zipFile ia a regular file.
        b) in try-with-resources creating a ZipInputStream for zipFile.
        c) iterating through all of the ZipEntries, and reading its content.
        d) creating FileProperties object using data from file.
